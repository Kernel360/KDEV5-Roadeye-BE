name: Deploy Dev

on:
  workflow_dispatch:
  push:
    branches:
      - dev

concurrency:
  group: 'deploy-dev-docker'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Caching Gradle dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper

      - name: Caching Jib layers
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-jib-${{ hashFiles('**/build.gradle*', '**/settings.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-jib-
          path: |
            ~/.cache/google-cloud-tools-java/jib/images
            ~/.cache/google-cloud-tools-java/jib/layers

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Projects
        run: |
          ./gradlew --build-cache \
            :roadeye-api:roadeye-api-hq:jibDockerBuild \
            :roadeye-api:roadeye-api-mdt-log-collector:jibDockerBuild \
              -Djib.to.tags=latest

  deploy-ecr:
    runs-on: ubuntu-22.04
    needs: [ build ]
    if: ${{ vars.USE_AWS_ECR == 'true' }}
    env:
      DOCKER_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to AWS
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push API-HQ image to ECR
        run: |
          docker tag roadeye-api-hq:latest ${{ env.DOCKER_REPOSITORY }}/roadeye/api-hq:latest
          docker push ${{ env.DOCKER_REPOSITORY }}/roadeye/api-hq:latest

      - name: Push API-MDT image to ECR
        run: |
          docker tag roadeye-api-mdt-log-collector:latest ${{ env.DOCKER_REPOSITORY }}/roadeye/api-mdt:latest
          docker push ${{ env.DOCKER_REPOSITORY }}/roadeye/api-mdt:latest

  deploy-ocr:
    runs-on: ubuntu-22.04
    needs: [ build ]
    if: ${{ vars.USE_OCI_OCR == 'true' }}
    env:
      DOCKER_REGISTRY: ${{ secrets.OCI_REGION }}.ocir.io
      DOCKER_USERNAME: ${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.OCI_DOCKER_PASSWORD }}
      DOCKER_REPOSITORY: ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}
    steps:
      - name: Login to Oracle Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Push API-HQ image to Oracle Container Registry
        run: |
          docker tag roadeye-api-hq:latest ${{ env.DOCKER_REPOSITORY }}/roadeye/api-hq:latest
          docker push ${{ env.DOCKER_REPOSITORY }}/roadeye/api-hq:latest

      - name: Push API-MDT image to Oracle Container Registry
        run: |
          docker tag roadeye-api-mdt-log-collector:latest ${{ env.DOCKER_REPOSITORY }}/roadeye/api-mdt:latest
          docker push ${{ env.DOCKER_REPOSITORY }}/roadeye/api-mdt:latest
